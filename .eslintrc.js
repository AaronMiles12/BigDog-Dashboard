const { resolve } = require("path");

module.exports = {
  parser: "@typescript-eslint/parser",
  extends: [
    "next/core-web-vitals",
    "stylelint",
    "plugin:@typescript-eslint/recommended",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
  ],
  env: {
    es6: true,
    node: true,
    browser: true,
    jest: true,
  },
  plugins: ["react", "react-hooks", "@typescript-eslint", "import", "node", "jsx-a11y"],
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module",
    ecmaFeatures: {
      jsx: true,
    },
    project: "./tsconfig.json",
    tsconfigRootDir: __dirname,
    extraFileExtensions: [".scss", ".css"],
  },
  rules: {
    "no-empty-pattern": "off",
    quotes: ["error", "double"],
    "node/no-missing-import": [
      "error",
      { tryExtensions: [".ts", ".tsx", ".js", ".jsx", ".json", ".css", ".scss"] },
    ],
    "n/no-missing-import": ["off"],
    "import/no-unresolved": "off",
    "react/react-in-jsx-scope": "off",

    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "interface",
        format: ["PascalCase"],
        leadingUnderscore: "forbid",
        trailingUnderscore: "forbid",
        prefix: ["I"],
      },
      {
        selector: "typeAlias",
        format: ["PascalCase"],
        leadingUnderscore: "forbid",
        trailingUnderscore: "forbid",
      },
      {
        selector: "enum",
        format: ["PascalCase"],
        leadingUnderscore: "forbid",
        trailingUnderscore: "forbid",
        suffix: ["Enum"],
      },
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        types: {
          object: {
            message:
              "Avoid the object type, as it is currently hard to use due to not being able to assert that keys exist",
            fixWith: "{}",
          },
        },
        extendDefaults: false,
      },
    ],
    "no-shadow": "off",
    "no-restricted-exports": "off",
    "no-use-before-define": "off",
    "import/no-relative-parent-imports": "off",
    "jsx-a11y/tabindex-no-positive": "off",
    "react/require-default-props": "off",
    "react/prop-types": "off",
    "class-methods-use-this": "off",
    "@typescript-eslint/semi": "error",
    "@typescript-eslint/member-delimiter-style": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    indent: "off",
    "react/button-has-type": "off",
    "react/jsx-one-expression-per-line": "off",
    "@typescript-eslint/no-empty-function": "off",
    "import/extensions": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "@typescript-eslint/indent": ["warn", 2],
    "linebreak-style": "off",
    "import/no-extraneous-dependencies": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "no-template-curly-in-string": "off",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-empty-interface": "warn",
    "no-useless-escape": "off",
    "max-len": "off",
    "no-plusplus": "off",
    "no-param-reassign": "off",
    "@typescript-eslint/triple-slash-reference": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "spaced-comment": "off",
    "no-underscore-dangle": "off",
    "no-confusing-arrow": "off",
    "global-require": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/no-autofocus": "off",
    "jsx-a11y/no-noninteractive-tabindex": "off",
    "jsx-a11y/no-noninteractive-element-interactions": "off",
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/label-has-for": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "react/no-unused-prop-types": [1],
    "import/prefer-default-export": "off",
    "arrow-parens": "error",
    "no-extra-bind": "error",
    "no-irregular-whitespace": "error",
    "no-unreachable": "error",
    "react/jsx-filename-extension": [
      1,
      {
        extensions: [".ts", ".tsx", ".js", ".scss"],
      },
    ],
    "sort-imports": [
      "error",
      {
        ignoreDeclarationSort: true,
      },
    ],
    "react/sort-comp": [
      1,
      {
        order: ["static-methods", "lifecycle", "rendering", "everything-else"],
        groups: {
          lifecycle: [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "state",
            "getInitialState",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount",
          ],
          rendering: ["/^render.+$/", "render"],
        },
      },
    ],
  },
  globals: {
    LocalFileSystem: true,
    fetchMock: true,
    page: true,
    browser: true,
    cy: true,
  },
  settings: {
    react: {
      version: "detect",
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx", "js", "jsx", ".scss", ".css"],
    },
    "import/resolver": {
      typescript: {
        alwaysTryTypes: true,
        project: "./tsconfig.json",
        alias: {
          map: [
            ["@/components/*", resolve(__dirname, "./src/components")],
            ["@/pages/*", resolve(__dirname, "./src/pages")],
            ["@/utils/", resolve(__dirname, "src/utils")],
            ["@/styles", resolve(__dirname, "./src/styles")],
            ["@/hooks/*", resolve(__dirname, "./src/hooks")],
            // ["@services/*", "./src/services"],
            // ["@models/*", "./src/models"],
            // ["@constants/*", "./src/constants"],
            // ["@types/*", "./src/types"],
            // ["@store/*", "./src/store"],
            // ["@assets/*", "./src/assets"],
            // ["@config/*", "./src/config"],
            // ["@providers/*", "./src/providers"],
          ],
          extensions: [".ts", ".js", ".json", ".tsx", ".jsx", ".scss", ".css"],
        },
      },
    },
  },
};
